#!/usr/bin/env bash
#$ -wd /home/kitsing/scratch/data/2020/task1/baselines/fst
#$ -l ram_free=15G,mem_free=15G
#$ -V
#$ -N wfstbaseline
#$ -j y -o $JOB_NAME-$JOB_ID.out
#$ -M clin103@jhu.edu
#$ -m e

conda activate task1

set -eou pipefail

readonly DAKSHINA_DATA=/export/b08/kitsing/dakshina/dakshina_dataset_v1.0
readonly DATA=../../data_dakshina
readonly RANDOM_STARTS=1
readonly LANG=${1}
readonly SEED=${2}
mkdir -p checkpoints-dakshina
mkdir -p ${DATA}

python disambiguate.py --input-path-prefix ${DAKSHINA_DATA} --shuffle --seed 42 --output-path-prefix ${DATA}

#for TRAIN_TSV in "${DATA}/train/"{bn,gu,hi,kn,ml,mr,pa,sd,si,ta,te,ur}"_train.tsv"; do
# for TRAIN_TSV in "${DATA}/train/${LANG}_train.tsv"; do
    # match training with dev/test distributions
    TRAIN_TSV="${DATA}/train/${LANG}_train.type.tsv"
    # TRAIN_TSV="${DATA}/train/${LANG}_train.type.tsv"
    DEV_TSV="${DATA}/dev/${LANG}_dev.type.tsv"
    TEST_TSV="${DATA}/test/${LANG}_test.type.tsv"
    LANGUAGE="$(basename $TRAIN_TSV _train.tsv)"
    # Output symbols.
    cut -f2 "${TRAIN_TSV}" "${DEV_TSV}" \
        | ngramsymbols \
        > "${LANGUAGE}_phones.sym"
    # Alignments.

    python ./align_dakshina.py \
        --seed="${SEED}" \
        --random_starts="${RANDOM_STARTS}" \
        --tsv_path="${TRAIN_TSV}" \
        --output_token_type="${LANGUAGE}.${SEED}.phones.sym" \
        --encoder_path="${LANGUAGE}.${SEED}.enc" \
        --far_path="${LANGUAGE}.${SEED}.far"
    # Loops over LM orders from 3 (trigram) to 9. 
    for ORDER in $(seq 3 9); do
        # NGram model.
        ./model \
            --encoder_path="${LANGUAGE}.${SEED}.enc" \
            --far_path="${LANGUAGE}.${SEED}.far" \
            --fst_path="checkpoints-dakshina/${LANGUAGE}-${ORDER}.type.${SEED}.fst" \
            --smoothing_method="witten_bell" \
            --order="${ORDER}"
        # Evaluation.
#        ./predict \
#            --input_path="${DEV_TSV}" \
#            --fst_path="checkpoints-dakshina/${LANGUAGE}-${ORDER}.fst" \
#            --output_token_type="${LANGUAGE}_phones.sym" \
#            --output_path="${LANGUAGE}.txt"
#
#        ./evaluate \
#            --gold_path="${DEV_TSV}" \
#            --hypo_path="${LANGUAGE}.txt" \
#            > "checkpoints-dakshina/${LANGUAGE}-${ORDER}-dev.res"
#        ./predict \
#            --input_path="${TEST_TSV}" \
#            --fst_path="checkpoints-dakshina/${LANGUAGE}-${ORDER}.fst" \
#            --output_token_type="${LANGUAGE}_phones.sym" \
#            --output_path="${LANGUAGE}.txt"
#        ./evaluate \
#            --gold_path="${TEST_TSV}" \
#            --hypo_path="${LANGUAGE}.txt" \
#            > "checkpoints-dakshina/${LANGUAGE}-${ORDER}-test.res"

        ./predict \
            --input_path="${DEV_TSV}" \
            --fst_path="checkpoints-dakshina/${LANGUAGE}-${ORDER}.type.${SEED}.fst" \
            --input_token_type="${LANGUAGE}.${SEED}.phones.sym" \
            --output_path="${LANGUAGE}-${ORDER}.txt.type.${SEED}.dev.invert" \
            -i
        ./evaluate \
            --gold_path="${DEV_TSV}" \
            --hypo_path="${LANGUAGE}-${ORDER}.txt.type.${SEED}.dev.invert" \
            -i \
            > "checkpoints-dakshina/${LANGUAGE}-${ORDER}-dev.type.${SEED}.inv.res"
        ./predict \
            --input_path="${TEST_TSV}" \
            --fst_path="checkpoints-dakshina/${LANGUAGE}-${ORDER}.type.${SEED}.fst" \
            --input_token_type="${LANGUAGE}.${SEED}.phones.sym" \
            -i \
            --output_path="${LANGUAGE}-${ORDER}.txt.type.${SEED}.test.invert"
        ./evaluate \
            --gold_path="${TEST_TSV}" \
            --hypo_path="${LANGUAGE}-${ORDER}.txt.type.${SEED}.test.invert" \
            -i \
            > "checkpoints-dakshina/${LANGUAGE}-${ORDER}-test.type.${SEED}.inv.res"
    done
    rm "${LANGUAGE}.${SEED}.phones.sym" \
        "${LANGUAGE}.${SEED}.enc" \
        "${LANGUAGE}.${SEED}.far" \
        "${LANGUAGE}-${ORDER}.txt.type.${SEED}.test.invert" \
        "${LANGUAGE}-${ORDER}.txt.type.${SEED}.dev.invert"
# done
